[{"id":"piiredactorfilter","user_id":"b7b7095f-2deb-4ae9-b2ca-2909a4355918","name":"PIIRedactorFilter","type":"filter","content":"from typing import Optional\nfrom pydantic import BaseModel, Field\n\nimport re\n\n\nclass PIIRedactor:\n    def __init__(self):\n        self.patterns = {\n            \"ssn\": [\n                re.compile(\n                    r\"\\b([0-3]{1}[0-9]{1}[0-1]{1}[0-9]{1}[0-9]{2})([-+A]{1})([0-9]{3})([a-zA-Z0-9]{1})\\b\"\n                ),\n                re.compile(r\"\\b([0-3]{1}[0-9]{1}[0-1]{1}[0-9]{1}[0-9]{2})([-+A]{1})\"),\n                re.compile(\n                    r\"\\b([0-3]{1}[0-9]{1}[0-1]{1}[0-9]{1}[0-9]{2})([-+A]{1})?([a-zA-Z]{3,4})?\\b\"\n                ),\n                re.compile(\n                    r\"\\b([0-3]{1}[0-9]{1}[0-1]{1}[0-9]{1}[0-9]{2})([-+A]{1})?([0-9]{3})?([a-zA-Z0-9]{1})?\\b\"\n                ),\n            ],\n            \"phone\": [\n                re.compile(r\"\\b(\\+?[0-9]{11,12})\\b\"),\n                re.compile(\n                    r\"\\b(\\+?[0-9]{2,3}\\s?[0-9]{2,3}\\s?[0-9]{1,3}\\s?[0-9]{3}\\s?[0-9]{4})\\b\"\n                ),\n                re.compile(r\"\\b([0-9]{2,3}\\s?[0-9]{1,3}\\s?[0-9]{3,4}\\s?[0-9]{3,4})\\b\"),\n                re.compile(r\"\\b([0-9]{2,3}\\s?[0-9]{3,4}\\s?[0-9]{3,4})\\b\"),\n                re.compile(r\"\\b([0-9]{2,3}\\s?[0-9]{3,5}\\s?[0-9]{3,5})\\b\"),\n                re.compile(r\"\\b(\\(?[0-9]{2,3}\\)?\\s?[0-9]{5,6}\\)?)\\b\"),\n            ],\n        }\n\n    def redact(self, text: str) -> str:\n        for pattern in self.patterns[\"ssn\"]:\n            text = pattern.sub(\"[HETU]\", text)\n        for pattern in self.patterns[\"phone\"]:\n            text = pattern.sub(\"[PUHELIN]\", text)\n        return text\n\n\nclass Filter:\n    class Valves(BaseModel):\n        # Regex settings\n        redact_enabled: bool = Field(default=True, description=\"Redact PII\")\n\n    def __init__(self):\n        self.file_handler = False\n        self.valves = self.Valves()\n        self._redactor = None\n\n    @property\n    def redactor(self):\n        if self._redactor is None:\n            self._redactor = PIIRedactor()\n        return self._redactor\n\n    def redact(self, text: str) -> str:\n        if self.valves.redact_enabled:\n            text = self.redactor.redact(text)\n        return text\n\n    def inlet(self, body: dict, __user__: Optional[dict] = None) -> dict:\n        messages = body.get(\"messages\", [])\n        for message in messages:\n            if message.get(\"role\") == \"user\":\n                content = message[\"content\"]\n                content = self.redact(content)\n                message[\"content\"] = content\n\n        return body\n\n    def outlet(self, body: dict, __user__: Optional[dict] = None) -> dict:\n        messages = body.get(\"messages\", [])\n        for message in messages:\n            if message.get(\"role\") == \"user\":\n                content = message[\"content\"]\n                content = self.redact(content)\n                message[\"content\"] = content\n\n        return body\n","meta":{"description":"Remove PII entities","manifest":{}},"is_active":true,"is_global":false,"updated_at":1742308610,"created_at":1741937653}]